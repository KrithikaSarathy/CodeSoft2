Code:
#include <iostream>

using namespace std;

// Function to display the game board
void displayBoard(char board[3][3]) {
    cout << "\n";
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            cout << " " << board[i][j] << " ";
            if (j < 2) cout << "|";
        }
        cout << "\n";
        if (i < 2) cout << "---+---+---\n";
    }
    cout << "\n";
}

// Function to check if a player has won
bool checkWin(char board[3][3], char player) {
    // Check rows, columns, and diagonals
    for (int i = 0; i < 3; i++) {
        if (board[i][0] == player && board[i][1] == player && board[i][2] == player) return true;  // Row check
        if (board[0][i] == player && board[1][i] == player && board[2][i] == player) return true;  // Column check
    }
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player) return true;  // Diagonal check
    if (board[0][2] == player && board[1][1] == player && board[2][0] == player) return true;  // Diagonal check
    return false;
}

// Function to check if the game is a draw
bool checkDraw(char board[3][3]) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] != 'X' && board[i][j] != 'O') return false;  // If there's still an empty spot
        }
    }
    return true;  // All spots are filled, it's a draw
}

// Function to play the game
void playTicTacToe() {
    char board[3][3] = { {'1', '2', '3'}, {'4', '5', '6'}, {'7', '8', '9'} };  // Initial board setup
    char currentPlayer = 'X';  // Player X starts the game
    bool gameOn = true;
    int move;
    
    while (gameOn) {
        displayBoard(board);
        
        // Ask current player for a move
        cout << "Player " << currentPlayer << ", enter your move (1-9): ";
        cin >> move;

        // Validate move
        if (move < 1 || move > 9) {
            cout << "Invalid move. Please enter a number between 1 and 9.\n";
            continue;
        }

        // Convert move number to board coordinates
        int row = (move - 1) / 3;
        int col = (move - 1) % 3;

        // Check if the spot is already taken
        if (board[row][col] == 'X' || board[row][col] == 'O') {
            cout << "This spot is already taken! Try again.\n";
            continue;
        }

        // Place the player's symbol on the board
        board[row][col] = currentPlayer;

        // Check for win or draw
        if (checkWin(board, currentPlayer)) {
            displayBoard(board);
            cout << "Player " << currentPlayer << " wins! Congratulations!\n";
            gameOn = false;
        } else if (checkDraw(board)) {
            displayBoard(board);
            cout << "It's a draw! Well played.\n";
            gameOn = false;
        } else {
            // Switch player
            currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
        }
    }

    // Ask if the players want to play again
    char playAgain;
    cout << "Do you want to play again? (y/n): ";
    cin >> playAgain;
    if (playAgain == 'y' || playAgain == 'Y') {
        playTicTacToe();  // Restart the game
    } else {
        cout << "Thanks for playing! Goodbye.\n";
    }
}

int main() {
    playTicTacToe();
    return 0;
}

Output:

 1 | 2 | 3 
---+---+---
 4 | 5 | 6 
---+---+---
 7 | 8 | 9 

Player X, enter your move (1-9): 5

 1 | 2 | 3 
---+---+---
 4 | X | 6 
---+---+---
 7 | 8 | 9 

Player O, enter your move (1-9): 6

 1 | 2 | 3 
---+---+---
 4 | X | O 
---+---+---
 7 | 8 | 9 

Player X, enter your move (1-9): 3

 1 | 2 | X 
---+---+---
 4 | X | O 
---+---+---
 7 | 8 | 9 

Player O, enter your move (1-9): 1

 O | 2 | X 
---+---+---
 4 | X | O 
---+---+---
 7 | 8 | 9 

Player X, enter your move (1-9): 7

 O | 2 | X 
---+---+---
 4 | X | O 
---+---+---
 X | 8 | 9 

Player X wins! Congratulations!
Do you want to play again? (y/n): n
Thanks for playing! Goodbye.
